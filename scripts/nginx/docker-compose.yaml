version: "3.5"

services:
  api01: &api
    image: samluiz/concurrency-control
    hostname: api01
    environment:
      - DB_HOSTNAME=db
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=bank
      - SERVER_PORT=3000
    ports:
      - "3001:3000"
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.45"
          memory: "200MB"

  api02:
    <<: *api
    hostname: api02
    environment:
      - DB_HOSTNAME=db
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=bank
      - SERVER_PORT=3000
    ports:
      - "3002:3000"
  
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: "0.15"
          memory: "10MB"

  db:
    image: postgres:latest
    hostname: db
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=bank
      - PGUSER=postgres
    ports:
      - "5432:5432"
      - "2345:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "db", "-p", "5432", "-q"]
      interval: 10s
      timeout: 5s
      retries: 5 
    command: postgres -c checkpoint_timeout=600 -c max_wal_size=4096
    deploy:
      resources:
        limits:
          cpus: "0.45"
          memory: "140MB"

networks:
  default:
    driver: bridge
    name: concurrency-control